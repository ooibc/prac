// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: rpc.proto

package __rlaction

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Info struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cid    *string  `protobuf:"bytes,1,req,name=cid" json:"cid,omitempty"`
	Level  *int32   `protobuf:"varint,2,req,name=level" json:"level,omitempty"`
	Reward *float32 `protobuf:"fixed32,3,req,name=reward" json:"reward,omitempty"`
}

func (x *Info) Reset() {
	*x = Info{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Info) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Info) ProtoMessage() {}

func (x *Info) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Info.ProtoReflect.Descriptor instead.
func (*Info) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{0}
}

func (x *Info) GetCid() string {
	if x != nil && x.Cid != nil {
		return *x.Cid
	}
	return ""
}

func (x *Info) GetLevel() int32 {
	if x != nil && x.Level != nil {
		return *x.Level
	}
	return 0
}

func (x *Info) GetReward() float32 {
	if x != nil && x.Reward != nil {
		return *x.Reward
	}
	return 0
}

type Act struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action *int32 `protobuf:"varint,1,req,name=action" json:"action,omitempty"`
}

func (x *Act) Reset() {
	*x = Act{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Act) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Act) ProtoMessage() {}

func (x *Act) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Act.ProtoReflect.Descriptor instead.
func (*Act) Descriptor() ([]byte, []int) {
	return file_rpc_proto_rawDescGZIP(), []int{1}
}

func (x *Act) GetAction() int32 {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return 0
}

var File_rpc_proto protoreflect.FileDescriptor

var file_rpc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x09,
	0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02,
	0x20, 0x02, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x02, 0x52, 0x06, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x22, 0x1d, 0x0a, 0x03, 0x41, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x32, 0x1f, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x05, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x04, 0x2e,
	0x41, 0x63, 0x74, 0x32, 0x1d, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x05, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x04, 0x2e, 0x41,
	0x63, 0x74, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x72, 0x6c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
}

var (
	file_rpc_proto_rawDescOnce sync.Once
	file_rpc_proto_rawDescData = file_rpc_proto_rawDesc
)

func file_rpc_proto_rawDescGZIP() []byte {
	file_rpc_proto_rawDescOnce.Do(func() {
		file_rpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_proto_rawDescData)
	})
	return file_rpc_proto_rawDescData
}

var file_rpc_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_rpc_proto_goTypes = []interface{}{
	(*Info)(nil), // 0: Info
	(*Act)(nil),  // 1: Act
}
var file_rpc_proto_depIdxs = []int32{
	0, // 0: Action.action:input_type -> Info
	0, // 1: Reset.reset:input_type -> Info
	1, // 2: Action.action:output_type -> Act
	1, // 3: Reset.reset:output_type -> Act
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rpc_proto_init() }
func file_rpc_proto_init() {
	if File_rpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Info); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Act); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_rpc_proto_goTypes,
		DependencyIndexes: file_rpc_proto_depIdxs,
		MessageInfos:      file_rpc_proto_msgTypes,
	}.Build()
	File_rpc_proto = out.File
	file_rpc_proto_rawDesc = nil
	file_rpc_proto_goTypes = nil
	file_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ActionClient is the client API for Action service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActionClient interface {
	Action(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Act, error)
}

type actionClient struct {
	cc grpc.ClientConnInterface
}

func NewActionClient(cc grpc.ClientConnInterface) ActionClient {
	return &actionClient{cc}
}

func (c *actionClient) Action(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Act, error) {
	out := new(Act)
	err := c.cc.Invoke(ctx, "/Action/action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionServer is the server API for Action service.
type ActionServer interface {
	Action(context.Context, *Info) (*Act, error)
}

// UnimplementedActionServer can be embedded to have forward compatible implementations.
type UnimplementedActionServer struct {
}

func (*UnimplementedActionServer) Action(context.Context, *Info) (*Act, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Action not implemented")
}

func RegisterActionServer(s *grpc.Server, srv ActionServer) {
	s.RegisterService(&_Action_serviceDesc, srv)
}

func _Action_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Action/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionServer).Action(ctx, req.(*Info))
	}
	return interceptor(ctx, in, info, handler)
}

var _Action_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Action",
	HandlerType: (*ActionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "action",
			Handler:    _Action_Action_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}

// ResetClient is the client API for Reset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResetClient interface {
	Reset(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Act, error)
}

type resetClient struct {
	cc grpc.ClientConnInterface
}

func NewResetClient(cc grpc.ClientConnInterface) ResetClient {
	return &resetClient{cc}
}

func (c *resetClient) Reset(ctx context.Context, in *Info, opts ...grpc.CallOption) (*Act, error) {
	out := new(Act)
	err := c.cc.Invoke(ctx, "/Reset/reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResetServer is the server API for Reset service.
type ResetServer interface {
	Reset(context.Context, *Info) (*Act, error)
}

// UnimplementedResetServer can be embedded to have forward compatible implementations.
type UnimplementedResetServer struct {
}

func (*UnimplementedResetServer) Reset(context.Context, *Info) (*Act, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}

func RegisterResetServer(s *grpc.Server, srv ResetServer) {
	s.RegisterService(&_Reset_serviceDesc, srv)
}

func _Reset_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Info)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResetServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Reset/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResetServer).Reset(ctx, req.(*Info))
	}
	return interceptor(ctx, in, info, handler)
}

var _Reset_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Reset",
	HandlerType: (*ResetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reset",
			Handler:    _Reset_Reset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc.proto",
}
